#!/bin/bash

Header () {
here=$(pwd)
cd /usr/share/undertaker/docs
./header.sh
cd $here
}

# Introduce script
Header
echo ""
echo "Welcome to the hash cracking protocol, powered by hashcat."
echo "It is managed here by undertaker, where it will ask you questions to simplify the cracking process."
echo "Only common options are available, as any advanced cracking should be done nativley."
echo "-----------"
read -p "What algorithm are your hashes (md5/sha1/wpa2/shadowfile): " Algo

# Choose algorithm

if [ "$Algo" == "md5" ]; then
	hashAlgo=0;
elif
	[ "$Algo" == "sha1" ]; then
	hashAlgo=100;
elif
	[ "$Algo" == "wpa2" ]; then
	hashAlgo=22000;
elif
	[ "$Algo" == "shadowfile" ]; then
	hashAlgo=1600;
else
	echo "That's not a supported hashmode."
	echo "If it exists in hashcat, try it there."
	exit 1
fi

#Determine source of hashes
#read -p "Are you cracking an individual hash? (y/n): " hashNum
#if [ "$hashNum" == "y" ]; then
#	read -p "Enter your hash: " hashFile
#elif [ "$hashNum" == "n" ]; then
#	read -p "Enter the filepath to your hash file: " hashFile
#else
#	echo "That's not a vaild input."
#	exit 1
#fi

read -p "Enter your hash or the filepath to your hashfile: " hashFile
if test -f $hashNum; then
	echo "The following hash $hashFile is assumed to be valid."
else
	echo "You have selected $hashFile as the location of your hashfile."
fi

# Determine attack mode
read -p "Are you cracking via bruteforce or wordlists? (btfc/wlst): " attackMode
if [ "$attackMode" == "btfc" ]; then
	
	#Determine character length
	read -p "How many characters do you believe the password will be? (Input a number): " charEstimate
	
	#Determine if character length is low enough to crack with optimized mode
	if [ "$charEstimate" -lt 31 ]; then
		optimizedMode=true
	elif [ "$charEstimate" -ge 31 ]; then
		optimizedMode=false
	else
		echo "Something went wrong. Only numerical values are accepted."
		exit 1
	fi

	#Function to ask the questions in qArray to see if the mask can be automade
	ask () {
	read -p "$1 (y/n): " answer
	}

	#Array of questions needed to match a charset to the bruteforceString
	qArray=(
		"Do you believe that the characters are all digits?"
		"Do you believe that the characters are all lowercase letters?"
		"Do you believe that the characters are all uppercase letters?"
		"Do you believe that the characters are all symbols?"
		"Do you believe that the characters are all lowercase letters and/or numbers?"
		"Do you believe that the characters are all uppercase letters? and/or numbers?"
		"Do you want to try virtually every possible combination when cracking?"
	)

	#Function that will ask each qArray question until it gets y as an answer
	askForMask () {
		local qArrayIndice=0
		for str in "${qArray[@]}"; do
			ask "$str"
			echo "-----------"
			echo "$qArrayIndice"

			if [ "$answer" == "y" ]; then
				return $qArrayIndice
			else
				#Continue on
				((qArrayIndice++))
			fi

		done
	}

	#Run function and capture return value (needed for makeString)
	askForMask
	qArrayIndice2=$?

	#Make setting equal to returned value from askForMask
	qArrayset=0;
	(( qArrayset += qArrayIndice2 ))

	echo "-----------"
	
	# Automatically construct the final mask string
	makeString () {
	bruteString=""
	for ((i=0; i<$charEstimate; i++));
		do
		bruteString+="$bruteforceEstimate"
	done
	}

	# Prepare the final string with its charsets  
	if 	[ "$qArrayset" -eq 0 ]; then
		bruteforceEstimate=?d
		makeString
	elif [ "$qArrayset" -eq 1 ]; then
		bruteforceEstimate=?l
		makeString
	elif [ "$qArrayset" -eq 2 ]; then
		bruteforceEstimate=?u
		makeString
	elif [ "$qArrayset" -eq 3 ]; then
		bruteforceEstimate=?s
		makeString
	elif [ "$qArrayset" -eq 4 ]; then
		bruteforceEstimate=?h
		makeString
	elif [ "$qArrayset" -eq 5 ]; then
		bruteforceEstimate=?H
		makeString
	elif [ "$qArrayset" -eq 6 ]; then
		bruteforceEstimate=?a
		makeString
	else
		# Mask couldn't be automade, so the user must create it manually
		echo "Entering the manual mask editor..."
		sleep 2
		clear
		echo "-----------"
		echo "Welcome to the manual mask editor."
		echo "Your settings are too vauge to automatically create."
		echo "Therefore, you must create it manually."
		echo "You will now be guided to create the mask string yourself."
		echo "{---------}"
		echo "Masks are created of charsets. ?d represents a charset of numbers (0123...)"
		echo "Additionally, you can insert guarenteed characters instead of a charset (?dPassword?s > 1Password!)"
		echo "String example 1) ?U?l?l?l?l?s > Crazy! 2) ?d?d?d?dsecure?d?s > 1234secure7!"
		echo "{---------}"
		echo "Charset guide: ?d > 123... ?l > abc... ?u > ABC... ?s > ,?!..."
		echo "Charset guide: ?h > abc123... ?H ABC123... ?a > ?l?u?d?s (everything)"
		echo "{---------}"
		echo ""
		read -p "Enter your string here (must be $charEstimate characters long): " bruteString
		clear
	fi	

	# Function for settings applied to every attack mode (always the first half)
	generalCrackSettings () {
	echo "The neccesary arguments have been constructed to crack your requested hash(es)."
	echo "Settings"
	echo "-----------"
	echo "Hashing algorithm: $hashAlgo ($Algo)"
	echo "Target hash(es): $hashFile"
	echo "Attack type: $attackMode"
	}

	# Function specifc to bruteforce attack mode settings (second half)
	bruteforceCrackSettings () {
	echo "Number of characters: $charEstimate"
	echo "Optimized cracking: $optimizedMode"
	echo "Bruteforce mask created: $bruteString"
	}

	# Annouce the settings for bruteforce
	generalCrackSettings
	bruteforceCrackSettings

	sleep 2
	echo "You have specified that there are $charEstimate characters and as such, optimizedMode has been set to $optimizedMode."
	echo "Any cracked hashes will be outputted to /usr/share/undertaker/hashFiles/crackedHashes/$Algo.txt"
	
	# Set time for point of no return (hashcat starting)
	timeToCrack () {
	for i in {10..0..1} 
	do
		echo "Cracking will start in $i"
		sleep 1
	done
	}

	timeToCrack

	# Put all the settings together and run hashcat
	echo "Starting hashcat..."
	sleep 2
	if $optimizedMode; then
		echo "Command used: sudo hashcat -a 3 -m $hashAlgo $hashFile $bruteString--outfile /usr/share/undertaker/crackedHashes/$Algo.txt -O"
		sudo hashcat -a 3 -m $hashAlgo $hashFile $bruteString--outfile /usr/share/undertaker/crackedHashes/$Algo.txt -O
	else
		echo "Command used: sudo hashcat -a 3 -m $hashAlgo $hashFile $bruteString--outfile /usr/share/undertaker/crackedHashes/$Algo.txt"
		sudo hashcat -a 3 -m $hashAlgo $hashFile $bruteString--outfile /usr/share/undertaker/crackedHashes/$Algo.txt
	fi
	exit 0

elif [ "$attackMode" == "wlst"]; then
	echo "Uncoded so far"
	exit 0
else
	echo "That isn't a valid attack mode."
	exit 1
fi